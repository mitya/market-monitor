- if candles.any?
  - if local_assigns[:header] != false
    thead.table-dark
      tr
        = th :icon
        = th :ticker, copy_tickers_button(candles.pluck(:ticker), local_assigns[:title]), sort: false
        = th :change, 'Yc ﹪', class: 'money-cell'
        = th :rel_volume, '𝑉', class: "money-cell"
        = th :volume, '𝑉 m', class: 'money-cell'
        = th :volatility, 'σ', class: 'money-cell'
  - else local_assigns[:title]
    thead.table-dark
      tr
        = th :icon
        = th :ticker, copy_tickers_button(candles.pluck(:ticker), local_assigns[:title]), sort: false
        = th :change
        = th :rel_volume
        = th :volume
        = th :volatility

  tbody
    - candles.each do |candle|
      - inst = candle.instrument
      / - classes = class_names('opacity-40' => inst.ignored? || local_assigns[:muted_if] ? muted_if.(candle) : false)
      - classes = class_names('opacity-40' => inst.ignored?)
      tr(class=classes)
        = td :icon, instrument_icon(inst)
        = td :ticker, format_ticker(inst)
        = td :change, class: "money-cell" do
          = colorized_ratio candle.rel_close_change, precision: 1, title: format_price(candle.close, candle.instrument)
          / = percentage_bar_or_number candle.rel_change, classes: "#{red_green_class candle.rel_change.to_f > 0}", threshold: 0.05, rtl: true
        = td :rel_volume, class: "money-cell is-light-blue" do
          = format_percentage candle.volume_to_average, round: true
          / = percentage_bar candle.volume_to_average / 100, classes: 'is-light-blue', threshold: -1, rtl: true,
          /   title: number_to_percentage(round_percentage(candle.volume_to_average * 100), precision: 0, format: '%n ﹪')
        = td :volume, class: 'money-cell' do
          = format_price_in_millions candle.volume_in_money, unit: inst
        = td :volatility, class: 'money-cell' do
          = format_percentage candle.volatility, precision: 0
