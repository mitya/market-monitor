- instruments = set.instruments

- instruments = instruments.select { tickers.include? _1.ticker } if local_assigns[:tickers].present?
- instruments = instruments.select { _1.currency == currency }    if local_assigns[:currency].present?
- instruments = instruments.select { _1.premium? }                if local_assigns[:availability] == 'premium'
- instruments = instruments.reject { _1.premium? }                if local_assigns[:availability] == 'tinkoff'
- instruments = instruments.reject { _1.yesterday == nil }

- unless local_assigns[:sort]
  - instruments = case set.key
  -   when /volume/   then instruments.sort_by { _1.aggregate.volumes['d1'] }.reverse
  -   when /spikes/   then instruments.sort_by { @spikes_index[_1.ticker].spike.to_f }.reverse
  -   when /level/    then instruments.sort_by &:ticker
  -   when /losers/   then instruments.sort_by { _1.stored_gain_since(selector).to_f }
  -   when /volatile/ then instruments.sort_by { _1.yesterday.volatility.abs }.reverse
  -   else                 instruments.sort_by { _1.stored_gain_since(selector).to_f }.reverse
- else
  - instruments = instruments.sort_by(&sort)

h6.ps-1(
  class=class_names('ticker-set-title', 'is-dark-green': set.key =~ /up_break/, 'is-dark-red': set.key =~ /down_break/)
  data-tickers=instruments.map(&:ticker).join(' ')
)
  = category_title set.key
table class="dash-table table table-sm table-hover table-font-sm tickers-table table-no-border table-sm-v"
  tbody
    - instruments.each do |inst|
      = render 'set_comparisions/ticker_row', inst: inst,
        change: inst.stored_gain_since(selector),
        hit: @hits_sets && @hits_sets[set.key]&.detect { inst.ticker == _1.ticker },
        spike_value: set.key =~ /spike/ && @spikes_index && @spikes_index[inst.ticker]&.spike,
        precision: precision,
        volume_cell: set.key =~ /volume_gainers|spike/,
        volume_decrease_cell: set.key =~ /volume_losers/,
        volatility_cell: set.key =~ /volatile/,
        level_cell: set.key =~ /ma|level/,
        bar_threshold: 0
