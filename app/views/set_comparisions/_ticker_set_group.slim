.col.flex-grow-0.dashboard-col
  - sets.each do |set|
    h6.ps-1(class=class_names('is-dark-green': set.key =~ /up_break/, 'is-dark-red': set.key =~ /down_break/))
      = category_title set.key
    table class="dash-table table table-sm table-hover table-font-sm tickers-table table-no-border table-sm-v"
      tbody
      
        - instruments = set.instruments.includes(:aggregate)
        
        - instruments = instruments.select { tickers.include? _1.ticker } if tickers.present?
        - instruments = instruments.select { _1.currency == currency } if currency
        - instruments = instruments.select { _1.premium? } if availability == 'premium'
        - instruments = instruments.reject { _1.premium? } if availability == 'tinkoff'
        
        - instruments = case set.key
        -   when /volume/ then instruments.sort_by { _1.aggregate.volumes['d1'] }.reverse
        -   when /spikes/ then instruments.sort_by { @spikes_index[_1.ticker].spike || -1 }.reverse
        -   when /level/  then instruments.sort_by &:ticker
        -   when /losers/ then instruments.sort_by { _1.stored_gain_since(selector) || -1 }
        -   else               instruments.sort_by { _1.stored_gain_since(selector) || -1 }.reverse
          
        - instruments.each do |inst|
          = render 'ticker_row', inst: inst,
            change: inst.stored_gain_since(selector),
            hit: @hits_sets && @hits_sets[set.key]&.detect { inst.ticker == _1.ticker }, 
            spike_value: set.key =~ /spike/ && @spikes_index && @spikes_index[inst.ticker]&.spike, 
            precision: precision,
            volume_cell: set.key =~ /volume_gainers|spike/, 
            volume_decrease_cell: set.key =~ /volume_losers/, 
            level_cell: set.key =~ /ma|level/