- tickers = params[:tickers].split.map(&:upcase).compact.uniq.to_set if params[:tickers].present?
- currency = params[:currency].presence
- availability = params[:availability].presence
- selector = 'last'
- precision = 1

main.container-fluid.ma-dashboard
  details.my-2.mx-3
    summary
      .d-inline-flex.flex-row.align-items-center.w-75.ps-3
        = render 'instruments/filter_by_currency'
        = render 'instruments/filter_by_availability'
    div
      | Nothing here

  .container-fluid
    .row
      - @set_groups.each do |sets|
        .col.flex-grow-0.dashboard-col
          - sets.each do |set|
            h6.ps-1(class=class_names('is-dark-green': set.key =~ /up_break/, 'is-dark-red': set.key =~ /down_break/))
              = category_title set.key
            table.table.table-sm.table-hover.table-font-sm.tickers-table.table-no-border.table-sm-v.dash-table
              tbody
                - instruments = set.instruments.includes(:aggregate)
                - instruments = instruments.select { tickers.include? _1.ticker } if tickers
                - instruments = instruments.select { _1.currency == currency } if currency
                - instruments = instruments.select { _1.premium? } if availability == 'premium'
                - instruments = instruments.reject { _1.premium? } if availability == 'tinkoff'
                - if set.key =~ /volume/
                  - instruments = instruments.sort_by { _1.aggregate.volumes['d1'] }
                - elsif set.key =~ /spikes/
                  - instruments = instruments.sort_by { @spikes_index[_1.ticker].spike || -1 }
                - else
                  - instruments = instruments.sort_by { _1.stored_gain_since(selector) || -1 }                
                - instruments = instruments.reverse
                - instruments.each do |inst|
                  - value = inst.stored_gain_since(selector)
                  - hit = @hits_sets[set.key]&.detect { inst.ticker == _1.ticker }
                  - spike_value = @spikes_index[inst.ticker]&.spike if @spikes_index                  
                  tr
                    td.ticker-cell(title=inst.name class=class_names('opacity-40': inst.illiquid? || inst.premium?))= inst.clean_ticker
                    td.money-cell.price-cell= format_price inst.last, unit: inst.currency
                    td.money-cell.change-cell
                      - if value
                        - if value.abs >= 0.08
                          = colorized_ratio value, precision: precision, format: '%n'
                        - else
                          = percentage_bar value, classes: class_names(red_green_class(value > 0), 'solid-narrow'), rtl: true
                    - if hit
                      td.money-cell= count_bar hit.days_since_last.to_f / 20.0, classes: 'is-light solid', title: "#{hit.days_since_last} days"
                      td.money-cell= percentage_bar hit.rel_vol / 100.0, classes: 'is-light-blue solid', title: "Volume: #{number_to_percentage hit.rel_vol * 100, precision: 0}"
                    - if spike_value
                      td.money-cell.change-cell                    
                        = colorized_ratio spike_value, precision: precision, format: '%n'                    
                    - if set.key =~ /volume_gainers|spike/
                      td.money-cell
                        - relvol = inst.aggregate.volumes['d1']
                        - if relvol > 10
                          = tag.span "#{relvol.to_i}x", class: 'is-light-blue'
                        - else
                          = percentage_bar relvol / 100.0, classes: 'is-light-blue solid', title: "Volume: #{number_to_percentage relvol / 100.0, precision: 0}"
                    - if set.key =~ /volume_losers/
                      td.money-cell
                        = tag.span "#{number_with_precision inst.aggregate.volumes['d1'], precision: 3}x", class: 'is-light-blue'

javascript:
  window.DashboardPeriod = "#{ params[:selector] }"
