- main_set = InstrumentSet.main
- portfolio = InstrumentSet.portfolio
- recommendations = InstrumentSet.recommendations
- price_target_format = params[:relative_price_targets] == '1' ? 'percentage' : 'absolute'
- past_price_format  = params[:relative_price_targets] == '1' ? 'percentage' : 'absolute'
- is_intraday = params[:interval] != 'day'

main.container-fluid
  h1.display-3 Signals

  form#list-config(action=signals_path class='my-2')
    = render 'instruments/filter_by_set'
    = render 'instruments/filter_by_currency'
    = render 'instruments/filter_by_availability'
    = render 'instruments/filter_by_tickers'
    = render 'instruments/pagination_options'
    = render 'filter_by_signal'
    = render 'filter_by_direction'
    = render 'filter_by_interval'
    = render 'filter_by_date'
    .row
      .col-sm-2
      .col-sm-9
        = bs_check_box :price_targets, 'Price targets', inline: true
        = bs_check_box :relative_price_targets, 'relative', inline: true

  .row
    .col-md-7.mt-4
      = page_entries_block @signals
      = paginate @signals, window: 10
    .col-md-5
      = render 'signal_stats'

  table.table.table-sm.table-hover.table-font-sm.tickers-table
    thead.table-dark
      tr
        th
        th
        th Ticker
        th
        th
        th Company
        th Sector
        th.money-cell.border-end.pe-2(data-sort="capitalization") Cap (M)
        - if params[:price_targets]
          th.money-cell Low
          th.money-cell Average
          th.money-cell High
          th.money-cell.border-end.pe-2
          th.money-cell(title=l(Current.month_ago, format: :week_day) data-sort="aggregates.m1") 1m ﹪
          th.money-cell.border-end.pe-2(data-sort="aggregates.y2021") ytd ﹪
        th Type
        th.money-cell Enter
        th.money-cell Current
        th.money-cell ﹪
        th.money-cell Stop
        th.money-cell ﹪
        th.money-cell PF
        th.money-cell Accuracy ﹪
        th.money-cell S/B
        th.text-end Date
        th.text-end Base
    tbody
      - @signals.each do |signal|
        - inst = instrument = signal.instrument
        - price_target = instrument.price_target
        - info = instrument.info
        - can_enter = signal.can_enter?(instrument.last)
        tr class=(class_names 'stopped-out': signal.stopped_out?(instrument.last), 'can-enter': can_enter, 'non-exact': !signal.exact?)
          td.money-cell
            => l signal&.time.in_time_zone(Current.msk), format: '%H:%M' if is_intraday
            = interval_badge signal.interval
          td= instrument_logo instrument
          td= red_green instrument.ticker, signal.direction == 'up'
          td= fa_icon 'star-of-life', xsmall: true if InstrumentSet.known?(signal.ticker)
          td= type_icon instrument
          td.instrument-name= instrument.name
          td= sector_badge instrument
          td.money-cell.border-end.pe-2(title="#{number_with_delimiter info&.shares} shares")= number_to_currency info&.marketcap_mil, unit: currency_span(instrument.currency), precision: 0
          - if params[:price_targets]
            td.money-cell= relative_price price_target&.low_in_usd,     instrument.base_price, unit: instrument.currency, format: price_target_format
            td.money-cell= relative_price price_target&.average_in_usd, instrument.base_price, unit: instrument.currency, format: price_target_format
            td.money-cell= relative_price price_target&.high_in_usd,    instrument.base_price, unit: instrument.currency, format: price_target_format
            td.money-cell.border-end.pe-2= days_old_badge price_target&.date
            td.money-cell                  = relative_price inst.m1_ago_close, inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
            td.money-cell.border-end.pe-2  = relative_price inst.y2021_open,   inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.signal-name
            = signal.kind.underscore.humanize.downcase
            = '?' if !signal.exact?
          td.money-cell= red_green "#{signal.up?? 'buy' : 'sell'} #{format_price(signal.enter, unit: instrument.currency)}", signal.up?
          td.money-cell.enter-price-val class=(red_green_class(signal.up?) if can_enter) = format_price instrument.last, unit: instrument.currency
          td.money-cell class=(red_green_class(signal.up?) if can_enter) = ratio_percentage price_ratio(instrument.last, signal.enter), precision: 1
          td.money-cell.stop-loss-val= format_price signal.stop, unit: instrument.currency
          td.money-cell= ratio_percentage signal.stop_size, precision: 1
          td.money-cell= ratio_percentage signal.profit_ratio, precision: 1
          td.money-cell= ratio_percentage signal.accuracy
          td.money-cell(title=candle_info(signal.candle))= number_with_precision signal.candle&.shadow_to_body_ratio, precision: 1
          td.text-end(title=signal.date)= link_to date_as_wday(signal.date), trading_view_url(instrument), target: '_blank', tabindex: '-1'
          td.text-end= date_as_wday signal.base_date

  = paginate @signals, window: 20
