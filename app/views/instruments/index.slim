- params[:relative_past_prices] ||= '1'
- past_price_format  = params[:relative_past_prices] == '1' ? 'percentage' : 'absolute'
- price_target_format = params[:relative_price_targets] == '1' ? 'percentage' : 'absolute'
- show_volume = params['volume'] == '1'
- show_volatility = params['volatility'] == '1'
- show_historical_prices = !show_volume && !show_volatility

main.container-fluid.mb-4
  h1.display-3 Instruments

  form#list-config(action=instruments_path class='my-2')
    = render 'filter_by_set'
    = render 'filter_by_currency'
    = render 'filter_by_availability'
    = render 'filter_by_sector'
    = render 'filter_by_sector_code'
    = render 'filter_by_tickers'
    .row.mb-3
      .col-sm-1
      .col-sm-5
        = bs_check_box :fundamentals, 'Show fundamentals', inline: true
        = bs_check_box :volume, 'Show volume', inline: true
        = bs_check_box :volatility, 'Show volatility', inline: true
        br
        = bs_check_box :price_targets, 'Show price targets', inline: true
        = bs_check_box :relative_price_targets, 'Use relative', inline: true
        = bs_check_box :relative_past_prices, 'Use relative past prices', default: true

  = page_entries_block @instruments
  = paginate @instruments, window: 20

  table.table.table-sm.table-hover.table-font-sm.tickers-table
    thead.table-dark
      tr
        th
        th Ticker
        th
        th Name
        th Sector
        th.money-cell Cap (M)
        - if params[:fundamentals]
          th.money-cell P/E
          th.money-cell ß
          th.money-cell.border-end.pe-2 Yield
        - if params[:price_targets]
          th.money-cell Low
          th.money-cell Average
          th.money-cell.border-end.pe-2 High
        th.money-cell Last
        th.money-cell.border-end.pe-2(title=l(Current.today,     format: :week_day)) Open ﹪
        th.money-cell(title=l(Current.yesterday, format: :week_day)) 1d ﹪
        th.money-cell(title=l(Current.d2_ago,    format: :week_day)) 2d ﹪
        th.money-cell(title=l(Current.d3_ago,    format: :week_day)) 3d ﹪

        th.money-cell(title=l(Current.week_ago,  format: :week_day)) 1w ﹪
        th.money-cell(title=l(Current.month_ago, format: :week_day)) 1m ﹪
        th.money-cell.border-end.pe-2 2021 ﹪
        - if show_volatility
          th.money-cell 1d σ
          th.money-cell 2d σ
          th.money-cell 3d σ
          th.money-cell 4d σ
          th.money-cell 1w σ
          th.money-cell 6d σ
          th.money-cell 7d σ
          th.money-cell 1m σ
        - if show_volume
          th.money-cell Vol 1d
          th.money-cell Vol 2d
          th.money-cell Vol 3d
          th.money-cell Vol 1w
          th.money-cell Vol 1m
        - if show_historical_prices
          th.money-cell Nov6 ﹪
          th.money-cell Mar23 ﹪
          th.money-cell Feb19 ﹪
          th.money-cell.border-end.pe-2 2020 ﹪
          th.money-cell 2019 ﹪
        th
        th
    tbody
      - instruments = @instruments
      / - instruments = @instruments.sort_by &:y2021_open_rel
      - instruments.each do |inst|
        - price_target = inst.price_target
        - info = inst.info
        - inst.current_price_selector = :last_or_open
        tr
          td= instrument_logo inst
          td= inst.ticker
          td= fa_icon :crown, small: true, title: 'Tinkoff Premium' if inst.premium?
          td= truncate inst.name
          td= sector_badge info&.sector_code, title: info&.industry

          td.money-cell(title="#{number_with_delimiter info&.shares} shares")= number_to_currency info&.marketcap_mil, unit: currency_span(inst.currency), precision: 0
          - if params[:fundamentals]
            td.money-cell                = number_with_precision info&.pe, precision: 0
            td.money-cell                = number_with_precision info&.beta, precision: 1
            td.money-cell.border-end.pe-2= number_to_percentage  info&.dividend_yield_percent, precision: 1

          - if params[:price_targets]
            td.money-cell                = relative_price price_target&.low,     inst.base_price, unit: price_target&.currency, format: price_target_format
            td.money-cell                = relative_price price_target&.average, inst.base_price, unit: price_target&.currency, format: price_target_format
            td.money-cell.border-end.pe-2= relative_price price_target&.high,    inst.base_price, unit: price_target&.currency, format: price_target_format

          td.money-cell
            - if inst.price!.outdated? && inst.last
              span.outdated-price(title="Last at #{inst.price!.last_at}")= format_price inst.last, unit: inst.currency
            - else
              = colorized_price inst.last, inst.today_open, unit: inst.currency
          td.money-cell.border-end.pe-2  = relative_price inst.    today_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell.muted-cell       = relative_price inst.yesterday_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell.muted-cell       = relative_price inst.   d2_ago_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell.muted-cell       = relative_price inst.   d3_ago_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell                  = relative_price inst. week_ago_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell                  = relative_price inst.month_ago_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell.border-end.pe-2  = relative_price inst.    y2021_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true

          - if show_volatility
            td.money-cell= volatility_indicator inst, :yesterday
            td.money-cell= volatility_indicator inst, :d2_ago
            td.money-cell= volatility_indicator inst, :d3_ago
            td.money-cell= volatility_indicator inst, :d4_ago
            td.money-cell= volatility_indicator inst, :week_ago
            td.money-cell= volatility_indicator inst, :d6_ago
            td.money-cell= volatility_indicator inst, :d7_ago            
            td.money-cell= volatility_indicator inst, :month_ago
          - if show_volume
            td.money-cell= format_price_in_millions inst.base_price * inst.yesterday_volume, unit: inst.currency
            td.money-cell= format_price_in_millions inst.base_price * inst.   d2_ago_volume, unit: inst.currency
            td.money-cell= format_price_in_millions inst.base_price * inst.   d3_ago_volume, unit: inst.currency
            td.money-cell= format_price_in_millions inst.base_price * inst. week_ago_volume, unit: inst.currency
            td.money-cell= format_price_in_millions inst.base_price * inst.month_ago_volume, unit: inst.currency
          - if show_historical_prices
            td.money-cell                  = relative_price inst.     nov06_low,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
            td.money-cell                  = relative_price inst.     mar23_low,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
            td.money-cell.muted-cell       = relative_price inst.     feb19_low,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
            td.money-cell.border-end.pe-2  = relative_price inst.    y2020_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
            td.money-cell.muted-cell       = relative_price inst.    y2019_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true

          td= link_to fa_icon('shopping-cart'), insider_transactions_path(ticker: inst.ticker), target: '_blank', title: 'Insider Transactions'
          td= exchange_logo inst.exchange_name

  = paginate @instruments, window: 20
