- params[:relative_past_prices] ||= '1'
- past_price_format  = params[:relative_past_prices] == '1' ? 'percentage' : 'absolute'
- price_target_format = params[:relative_price_targets] == '1' ? 'percentage' : 'absolute'
- show_volume = params['volume'] == '1'
- chart_volatility = params['chart_volatility'] == '1'
- show_volatility = params['volatility'] == '1' && !chart_volatility
- show_historical_prices = !show_volume && !show_volatility && !chart_volatility
- volatility_format = :percentage
- volatility_cell_class = volatility_format == :bar ?  'indicator-cell' : 'money-cell'
- is_portfolio = params[:set] == 'portfolio'

main.container-fluid.mb-4
  form#list-config(action=instruments_path class='my-2')
    .row.mb-3
      .col
        = render 'filter_by_set'
        = render 'filter_by_currency'
        = render 'filter_by_availability'
        = render 'filter_by_sector'
        = render 'filter_by_sector_code'
        = render 'filter_by_tickers'
        = render 'order_options'
      .col
        .row.mb-3
          .col-sm-1
          .col-sm-10
            = bs_check_box :fundamentals, 'Fundamentals'
            = bs_check_box :volume, 'Volume'
            = bs_check_box :volatility, 'Volatility', inline: true
            = bs_check_box :chart_volatility, 'as chart', inline: true
            br
            = bs_check_box :price_targets, 'Price targets', inline: true
            = bs_check_box :relative_price_targets, 'relative', inline: true
            = bs_check_box :relative_past_prices, 'Use relative past prices', default: true

  = page_entries_block @instruments
  = paginate @instruments, window: 20

  table.table.table-sm.table-hover.table-font-sm.tickers-table
    thead.table-dark
      tr
        th
        th Ticker
        th
        th Name
        - if is_portfolio
          th.money-cell Lots
          th.money-cell Cost
        th Sector
        th.money-cell Cap (M)
        - if params[:fundamentals]
          th.money-cell P/E
          th.money-cell ß
          th.money-cell.border-end.pe-2 Yield
        - if params[:price_targets]
          th.money-cell Low
          th.money-cell Average
          th.money-cell.border-end.pe-2 High
        th.money-cell Last
        th.money-cell.border-end.pe-2(title=l(Current.today,     format: :week_day)) Open ﹪
        th.money-cell(title=l(Current.yesterday, format: :week_day)) 1d ﹪
        th.money-cell(title=l(Current.d2_ago,    format: :week_day)) 2d ﹪
        th.money-cell(title=l(Current.d3_ago,    format: :week_day)) 3d ﹪
        th.money-cell(title=l(Current.d4_ago,    format: :week_day)) 4d ﹪
        th.money-cell(title=l(Current.w1_ago,    format: :week_day)) 1w ﹪
        th.money-cell(title=l(Current.w2_ago,    format: :week_day)) 2w ﹪
        th.money-cell(title=l(Current.month_ago, format: :week_day)) 1m ﹪
        th.money-cell.border-end.pe-2 ytd ﹪
        - if show_volatility
          th.money-cell(title=l(Current.today,     format: :week_day))    σ
          th.money-cell(title=l(Current.yesterday, format: :week_day)) 1d σ
          th.money-cell(title=l(Current.d2_ago,    format: :week_day)) 2d σ
          th.money-cell(title=l(Current.d3_ago,    format: :week_day)) 3d σ
          th.money-cell(title=l(Current.d4_ago,    format: :week_day)) 4d σ
          th.money-cell(title=l(Current.w1_ago,    format: :week_day)) 1w σ
          th.money-cell(title=l(Current.w2_ago,    format: :week_day)) 2w σ
          th.money-cell(title=l(Current.month_ago, format: :week_day)) 1m σ
        - if chart_volatility
          th.text-left Volatility
        - if show_volume
          th.money-cell Vol 1d
          th.money-cell Vol 2d
          th.money-cell Vol 3d
          th.money-cell Vol 1w
          th.money-cell Vol 1m
        - if show_historical_prices
          th.money-cell Nov6 ﹪
          th.money-cell Mar23 ﹪
          th.money-cell Feb19 ﹪
          th.money-cell.border-end.pe-2 2020 ﹪
          th.money-cell 2019 ﹪
        th
    tbody
      - instruments = @instruments
      / - instruments = @instruments.sort_by  { |inst| inst.portfolio_item&.total_in_usd.to_d }.reverse if is_portfolio
      - instruments.each do |inst|
        - price_target = inst.price_target
        - portfolio_item = inst.portfolio_item
        - info = inst.info
        - inst.current_price_selector = :last_or_open
        tr data-ticker=inst.ticker
          td= link_to instrument_logo(inst), trading_view_url(inst), target: '_blank', tabindex: '-1' if inst.has_logo?
          td= inst.ticker
          td= fa_icon :crown, small: true, title: 'Tinkoff Premium' if inst.premium?
          td= truncate inst.name
          - if is_portfolio
            td.money-cell
              input class="form-control form-control-sm lots-input" type="number" value=portfolio_item&.lots
            td.money-cell
              = format_price portfolio_item.total_in_usd, unit: 'USD', precision: 0 if portfolio_item&.total_in_usd

          td= sector_badge inst

          td.money-cell(title="#{number_with_delimiter info&.shares} shares")= number_to_currency info&.marketcap_mil, unit: currency_span(inst.currency), precision: 0
          - if params[:fundamentals]
            td.money-cell                = number_with_precision info&.pe, precision: 0
            td.money-cell                = number_with_precision info&.beta, precision: 1
            td.money-cell.border-end.pe-2= number_to_percentage  info&.dividend_yield_percent, precision: 1

          - if params[:price_targets]
            td.money-cell                = relative_price price_target&.low,     inst.base_price, unit: price_target&.currency, format: price_target_format
            td.money-cell                = relative_price price_target&.average, inst.base_price, unit: price_target&.currency, format: price_target_format
            td.money-cell.border-end.pe-2= relative_price price_target&.high,    inst.base_price, unit: price_target&.currency, format: price_target_format

          td.money-cell
            - if inst.price!.outdated? && inst.last
              span.outdated-price(title="Last at #{inst.price!.last_at&.localtime}")= format_price inst.last, unit: inst.currency
            - else
              = colorized_price inst.last, inst.today_open, unit: inst.currency
          td.money-cell.border-end.pe-2  = relative_price inst.    today_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell.muted-cell       = relative_price inst.yesterday_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell.muted-cell       = relative_price inst.   d2_ago_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell.muted-cell       = relative_price inst.   d3_ago_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell.muted-cell       = relative_price inst.   d4_ago_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell                  = relative_price inst.   w1_ago_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell                  = relative_price inst.   w2_ago_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell                  = relative_price inst.month_ago_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
          td.money-cell.border-end.pe-2  = relative_price inst.    y2021_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true

          - if show_volatility
            td[class=volatility_cell_class]= volatility_indicator inst, :today,     format: volatility_format
            td[class=volatility_cell_class]= volatility_indicator inst, :d1_ago,    format: volatility_format
            td[class=volatility_cell_class]= volatility_indicator inst, :d2_ago,    format: volatility_format
            td[class=volatility_cell_class]= volatility_indicator inst, :d3_ago,    format: volatility_format
            td[class=volatility_cell_class]= volatility_indicator inst, :d4_ago,    format: volatility_format
            td[class=volatility_cell_class]= volatility_indicator inst, :w1_ago,    format: volatility_format
            td[class=volatility_cell_class]= volatility_indicator inst, :w2_ago,    format: volatility_format
            td[class=volatility_cell_class]= volatility_indicator inst, :month_ago, format: volatility_format
          - if chart_volatility
            td.volatility-chart
              - Current.last_2_weeks.each do |date|
                = volatility_indicator inst, date, format: :bar

          - if show_volume
            td.money-cell= format_price_in_millions inst.base_price * inst.yesterday_volume, unit: inst.currency
            td.money-cell= format_price_in_millions inst.base_price * inst.   d2_ago_volume, unit: inst.currency
            td.money-cell= format_price_in_millions inst.base_price * inst.   d3_ago_volume, unit: inst.currency
            td.money-cell= format_price_in_millions inst.base_price * inst. week_ago_volume, unit: inst.currency
            td.money-cell= format_price_in_millions inst.base_price * inst.month_ago_volume, unit: inst.currency
          - if show_historical_prices
            td.money-cell                  = relative_price inst.     nov06_low,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
            td.money-cell                  = relative_price inst.     mar23_low,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
            td.money-cell.muted-cell       = relative_price inst.     feb19_low,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
            td.money-cell.border-end.pe-2  = relative_price inst.    y2020_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true
            td.money-cell.muted-cell       = relative_price inst.    y2019_open,  inst.base_price, unit: inst.currency, format: past_price_format, inverse: true

          td= link_to insider_transactions_path(tickers: inst.ticker), target: '_blank', title: 'Insider Transactions', tabindex: '-1' do
            = exchange_logo(inst.exchange_name)

  = paginate @instruments, window: 20
