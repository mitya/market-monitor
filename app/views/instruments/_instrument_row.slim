- price_target = inst.price_target
- portfolio_item = inst.portfolio_item
- aggregate = inst.aggregate
- indicators = inst.indicators
- info = inst.info
- inst.current_price_selector = :last_or_open

tr data-ticker=inst.ticker class=class_names('portfolio-inactive': @is_portfolio && !inst.portfolio_item&.active? )
  td= country_flag inst
  td= instrument_logo_button inst
  td.ticker-name= inst.ticker
  td= known_icon inst
  td= type_icon inst
  td.instrument-name= truncate inst.name

  - if @is_portfolio
    td
      input class="form-check-input portfolio-item-checker" type="checkbox" value="1" checked=portfolio_item&.active
    td.money-cell
      input class="form-control form-control-sm lots-input" type="number" data-account="tinkoff" value=portfolio_item&.tinkoff_lots
    td.money-cell
      input class="form-control form-control-sm lots-input" type="number" data-account="tinkoff_iis" value=portfolio_item&.tinkoff_iis_lots
    td.money-cell
      input class="form-control form-control-sm lots-input" type="number" data-account="vtb" value=portfolio_item&.vtb_lots
    td.money-cell= number_with_delimiter portfolio_item&.total_lots
    td.money-cell= format_price portfolio_item.cost_in_usd, unit: 'USD', precision: 0 if portfolio_item&.cost_in_usd
    td.money-cell
      input class="form-control form-control-sm lots-input" type="number" data-account="ideal" value=portfolio_item&.ideal_lots
    td.money-cell= format_price portfolio_item.ideal_cost_in_usd, unit: 'USD', precision: 0 if portfolio_item&.ideal_cost_in_usd
    td.money-cell= colorized_diff portfolio_item.cost_in_usd, portfolio_item.ideal_cost_in_usd, unit: inst.currency, precision: 0 if portfolio_item&.ideal_cost_in_usd.to_i > 0

  td.money-cell(title="#{number_with_delimiter info&.shares} shares")= number_to_currency info&.marketcap_mil, unit: currency_span(inst.currency), precision: 0

  td.money-cell.border-end.pe-2= number_with_precision info&.beta, precision: 1 if info&.beta != 0

  - if @show_sector
    td= sector_badge inst

  - if @vtb_marginal_info
    td.money-cell.is-green= format_risk_ratio inst.info&.vtb_long_risk
    td.money-cell.is-red= format_risk_ratio inst.info&.vtb_short_risk

  - if @tinkoff_marginal_info
    td.money-cell.is-green= format_risk_ratio inst.info&.tinkoff_long_risk
    td.money-cell.is-red= format_risk_ratio inst.info&.tinkoff_short_risk if inst.info&.tinkoff_can_short?

  - if params[:fundamentals]
    td.money-cell                = number_with_precision info&.pe, precision: 0
    td.money-cell.border-end.pe-2= number_to_percentage  info&.dividend_yield_percent, precision: 1

  - if params[:price_targets]
    td.money-cell= relative_price price_target&.low_in_usd,     inst.base_price, unit: inst.currency, format: @price_target_format
    td.money-cell= relative_price price_target&.average_in_usd, inst.base_price, unit: inst.currency, format: @price_target_format
    td.money-cell= relative_price price_target&.high_in_usd,    inst.base_price, unit: inst.currency, format: @price_target_format
    td.money-cell.border-end.pe-2= days_old_badge price_target&.date

  td.money-cell
    - if inst.price!.outdated? && inst.last
      span.outdated-price(title="Last at #{inst.price!.last_at&.localtime}")= format_price inst.last, unit: inst.currency
    - else
      = colorized_price inst.last, inst.d1_ago_close, unit: inst.currency

  td.money-cell= colorized_ratio inst.price!.change, precision: 1

  - if @show_open
    td.money-cell.border-end.pe-2  = relative_price inst.today_open,   inst.base_price, unit: inst.currency, format: @past_price_format, inverse: true

  - if @show_recent_prices
    td.money-cell.muted-cell       = relative_price inst.d2_ago_close, inst.d1_ago_close, unit: inst.currency, format: @past_price_format, inverse: true
    td.money-cell.muted-cell       = relative_price inst.d3_ago_close, inst.d1_ago_close, unit: inst.currency, format: @past_price_format, inverse: true
    td.money-cell                  = relative_price inst.w1_ago_close, inst.d1_ago_close, unit: inst.currency, format: @past_price_format, inverse: true
    td.money-cell                  = relative_price inst.w2_ago_close, inst.d1_ago_close, unit: inst.currency, format: @past_price_format, inverse: true
    td.money-cell                  = relative_price inst.m1_ago_close, inst.d1_ago_close, unit: inst.currency, format: @past_price_format, inverse: true
    td.money-cell                  = relative_price inst.m3_ago_close, inst.d1_ago_close, unit: inst.currency, format: @past_price_format, inverse: true
    td.money-cell                  = relative_price inst.y2022_open,   inst.d1_ago_close, unit: inst.currency, format: @past_price_format, inverse: true
    td.money-cell.border-end.pe-2  = relative_price inst.y1_ago_close, inst.d1_ago_close, unit: inst.currency, format: @past_price_format, inverse: true

  - if @show_sa
    = render "instruments/seeking_alpha_fields", instrument: inst, aggregate: inst.insider_aggregate, format: @past_price_format

  - if @show_low
    td.money-cell(title=aggregate.lowest_day_date)= days_ago aggregate.lowest_day_date
    td.money-cell.border-end.pe-2= relative_price aggregate.lowest_day_low, inst.base_price, unit: inst.currency, format: @past_price_format, inverse: true

  - if @show_volume_diff
    td.money-cell=
    td.money-cell= ratio_percentage aggregate.volumes['d1'], precision: 0
    td.money-cell= ratio_percentage aggregate.volumes['d2'], precision: 0
    td.money-cell= ratio_percentage aggregate.volumes['d3'], precision: 0
    td.money-cell= ratio_percentage aggregate.volumes['d4'], precision: 0
    td.money-cell= ratio_percentage aggregate.volumes['w1'], precision: 0
    td.money-cell= ratio_percentage aggregate.volumes['w2'], precision: 0
    td.money-cell= ratio_percentage aggregate.volumes['m1'], precision: 0
    td.money-cell= ratio_percentage aggregate.volumes['m3'], precision: 0
    td.money-cell= ratio_percentage aggregate.volumes['y1'], precision: 0

  - if @show_volatility
    td[class=@volatility_cell_class]= volatility_indicator inst, :today,  format: @volatility_format
    td[class=@volatility_cell_class]= volatility_indicator inst, :d1_ago, format: @volatility_format
    td[class=@volatility_cell_class]= volatility_indicator inst, :d2_ago, format: @volatility_format
    td[class=@volatility_cell_class]= volatility_indicator inst, :d3_ago, format: @volatility_format
    td[class=@volatility_cell_class]= volatility_indicator inst, :d4_ago, format: @volatility_format
    td[class=@volatility_cell_class]= volatility_indicator inst, :w1_ago, format: @volatility_format
    td[class=@volatility_cell_class]= volatility_indicator inst, :w2_ago, format: @volatility_format
    td[class=@volatility_cell_class]= volatility_indicator inst, :m1_ago, format: @volatility_format
    td[class=@volatility_cell_class]= volatility_indicator inst, :m3_ago, format: @volatility_format
    td[class=@volatility_cell_class]= volatility_indicator inst, :y1_ago, format: @volatility_format

  - if @chart_volatility
    td.volatility-chart
      - Current.last_2_weeks.each do |date|
        = volatility_indicator inst, date, format: :bar

  - if @show_volume
    / td.money-cell= format_price_in_millions aggregate.d1_money_volume, unit: inst.currency
    td.money-cell= format_price_in_millions inst.base_price.to_d * inst.lot * inst.yesterday_volume.to_d, unit: inst.currency
    td.money-cell= format_price_in_millions inst.base_price.to_d * inst.lot * inst.   d2_ago_volume.to_d, unit: inst.currency
    td.money-cell= format_price_in_millions inst.base_price.to_d * inst.lot * inst.   d3_ago_volume.to_d, unit: inst.currency
    td.money-cell= format_price_in_millions inst.base_price.to_d * inst.lot * inst. week_ago_volume.to_d, unit: inst.currency
    td.money-cell= format_price_in_millions inst.base_price.to_d * inst.lot * inst.month_ago_volume.to_d, unit: inst.currency
    td.money-cell= format_price_in_millions info&.d5_money_volume, unit: inst.currency, precision: 1
    td.money-cell= colorized_ratio info&.d5_marketcap_volume, precision: 1

  - if @show_special_dates
    - MarketCalendar.current_special_dates.each do |date|
      td.money-cell(class=class_names('muted-cell': date < Current.y2021))= colorized_ratio aggregate.gains[date.to_s]

  - if @show_recent_years
    - MarketCalendar.current_recent_years.each do |year|
      td.money-cell= colorized_ratio aggregate.gains[year.to_s]
      / td.money-cell.muted-cell= relative_price inst.send("y#{year}_open"), inst.d1_ago_close, unit: inst.currency, format: @past_price_format, inverse: true

  td
    = link_to insider_transactions_path(tickers: inst.ticker), target: '_blank', title: 'Insider Transactions', tabindex: '-1' do
      = exchange_logo(inst.exchange_name)

  - if @show_last_insider_buys
    td.money-cell= relative_price inst.info&.last_insider_buy_price, inst.base_price, unit: inst.currency, format: @past_price_format, inverse: true

  - if @show_ema_trends
    td.money-cell(class=red_green_class(indicators&.ema_20_trend.to_d  > 0) title=indicators&.ema_20 )= indicators&.ema_20_trend
    td.money-cell(class=red_green_class(indicators&.ema_50_trend.to_d  > 0) title=indicators&.ema_50 )= indicators&.ema_50_trend
    td.money-cell.border-end.pe-2(class=red_green_class(indicators&.ema_200_trend.to_d > 0) title=indicators&.ema_200)= indicators&.ema_200_trend

  - if @show_extremums
    td.money-cell(title=format_date_as_text_with_days(aggregate.y1_high_date))= colorized_ratio aggregate.y1_high_change
    td.money-cell(title=format_date_as_text_with_days(aggregate.y3_high_date))= colorized_ratio aggregate.y3_high_change if aggregate.y3_high_change != aggregate.y1_high_change
    td.money-cell(title=format_date_as_text_with_days(aggregate.y1_low_date)) = colorized_ratio aggregate.y1_low_change
    td.money-cell(title=format_date_as_text_with_days(aggregate.y3_low_date)) = colorized_ratio aggregate.y3_low_change if aggregate.y3_low_change != aggregate.y1_low_change

  td= growth_badge aggregate
  td= change_map aggregate
  td= link_to fa_icon(:adjust), instrument_options_path(inst) if inst.usd?
